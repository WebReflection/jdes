#!/usr/bin/env node

'use strict';

const {existsSync, readFileSync} = require('fs');
const {resolve} = require('path');

let TARGET = 'js';
let SOURCE = '';
let DEST = '';

for (let {argv} = process, i = 2, {length} = argv; i < length; i++) {
  if (/^-/.test(argv[i])) {
    const equal = argv[i].indexOf('=');
    const key = equal < 0 ? argv[i] : argv[i].slice(0, equal);
    const value = () => equal < 0 ? (++i < length ? argv[i] : '') : argv[i].slice(equal + 1);
    switch (key) {
      case '-h':
      case '--help':
        console.log('');
        console.log('Destructured JS @ https://github.com/webreflection/jdes');
        console.log('  --help          this message');
        console.log('  --source        source file or folder      [optional]');
        console.log('  --dest          dest file or folder        [optional]');
        console.log('  --target        compiled target: js        [default: js]');
        console.log('');
        process.exit(0);
      case '--src':
      case '--source':
        const source = value();
        if (!source) {
          console.error('invalid source path');
          process.exit(1);
        }
        SOURCE = resolve(process.cwd(), source);
        break;
      case '--dest':
        const dest = value();
        if (!dest) {
          console.error('invalid destination path');
          process.exit(1);
        }
        DEST = resolve(process.cwd(), dest);
        break;
      case '--target':
        TARGET = value().toLowerCase();
        break;
    }
  }
  else {
    if (SOURCE) {
      console.error('duplicated source path');
      process.exit(1);
    }
    SOURCE = resolve(process.cwd(), argv[i]);
    if (!existsSync(SOURCE)) {
      console.error('unable to parse source');
      process.exit(1);
    }
  }
}

const parse = {
  js: require('./js.js'),
  es3: require('./es3.js')
};

if (!parse.hasOwnProperty(TARGET)) {
  console.error(`unknown target ${TARGET}`);
  process.exit(1);
}

const transform = content => parse[TARGET](content);

if (SOURCE) {
  const content = readFileSync(SOURCE, 'utf-8').toString().trim();
  process.stdout.write(transform(content));
}
else {
  const content = readFileSync(0, 'utf-8').toString().trim();
  process.stdout.write(transform(content));
}
